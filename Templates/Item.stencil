import UIKit

enum Item: AutoEquatable {
{% for type in types.implementing.Model %}
    case {{type.name|lowercase}}({{type.name}})
{% endfor %}
}

extension Item {
    var image: UIImage {
        switch self {
        {% for type in types.implementing.Model %}
        case .{{type.name|lowercase}}:
            return Asset.Items.{{type.name|lowercase}}.image
        {% endfor %}
        }
    }
}

extension Item: CustomStringConvertible {
    var description: String {
        switch self {
        {% for type in types.implementing.Model %}
        case .{{type.name|lowercase}}(let {{type.name|lowercase}}):
            return {{type.name|lowercase}}.description
        {% endfor %}
        }
    }
}

extension Item {
    var name: String {
        switch self {
        {% for type in types.implementing.Model %}
        case .{{type.name|lowercase}}(let {{type.name|lowercase}}):
            return {{type.name|lowercase}}.{{type.annotations.nameProperty|default:"name"}}
        {% endfor %}
        }
    }
}

extension Item: Encodable {
    enum CodingKeys: CodingKey {
        case type, item
    }
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        {% for type in types.implementing.Model %}
        case .{{type.name|lowercase}}(let {{type.name|lowercase}}):
            try container.encode("{{type.name|lowercase}}", forKey: .type)
            try container.encode({{type.name|lowercase}}, forKey: .item)
        {% endfor %}
        }
    }
}
